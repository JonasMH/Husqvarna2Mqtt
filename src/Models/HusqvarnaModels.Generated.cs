//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Husqvarna2Mqtt.Models
{
    using System = global::System;

    

    /// <summary>
    /// A data document compliant with the JSON API Specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonApiDataDocument
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public Mower Data { get; set; } = default!;

    }

    /// <summary>
    /// A data list document compliant with the JSON API Specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonApiDataListDocument
    {
        /// <summary>
        /// An array of primary data objects.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<Mower> Data { get; set; } = default!;

    }

    /// <summary>
    /// A primary data object compliant with the JSON API Specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Mower
    {
        /// <summary>
        /// The type of the data object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; } = default!;

        /// <summary>
        /// The identity of the data object
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public MowerData Attributes { get; set; } = default!;

    }

    /// <summary>
    /// A data document compliant with the JSON API Specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonApiDataDocumentWorkArea
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public JsonApiDataWorkArea Data { get; set; } = default!;

    }

    /// <summary>
    /// A data list document compliant with the JSON API Specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonApiDataListDocumentWorkAreas
    {
        /// <summary>
        /// An array of primary data objects.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<JsonApiDataWorkArea> Data { get; set; } = default!;

    }

    /// <summary>
    /// A primary data object compliant with the JSON API Specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonApiDataWorkArea
    {
        /// <summary>
        /// The type of the data object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; } = default!;

        /// <summary>
        /// The identity of the work area
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public WorkAreaData Attributes { get; set; } = default!;

    }

    /// <summary>
    /// A data document compliant with the JSON API Specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonApiDataDocumentCommandResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public JsonApiDataCommandResult Data { get; set; } = default!;

    }

    /// <summary>
    /// A data list document compliant with the JSON API Specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonApiDataDocumentListCommandResult
    {
        /// <summary>
        /// An array of primary data objects.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.ICollection<JsonApiDataCommandResult> Data { get; set; } = default!;

    }

    /// <summary>
    /// A primary data object compliant with the JSON API Specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonApiDataCommandResult
    {
        /// <summary>
        /// The type of the data object. Depending on what action is sent to the mower. control is when sending an action (Start/Park). Timetable when updating calendar.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; } = default!;

        /// <summary>
        /// The command id generated when sending the command to the mower.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// An error document compliant with the JSON API Specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonApiErrorDocument
    {

        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        public System.Collections.Generic.ICollection<JsonApiError> Errors { get; set; } = default!;

    }

    /// <summary>
    /// A primary error object compliant with the JSON API Specification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonApiError
    {
        /// <summary>
        /// A unique identifier for this particular occurrence of the problem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// The HTTP status code applicable to this problem, expressed as a string value.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; } = default!;

        /// <summary>
        /// An application specific error code, expressed as a string value.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; } = default!;

        /// <summary>
        /// A short, human readable summary of the problem that should not change from occurrence to occurrence of the problem, except for purposes of localization.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; } = default!;

        /// <summary>
        /// A human readable explanation specific to this occurrence of the problem. Like title, this value can be localized.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string Detail { get; set; } = default!;

    }

    /// <summary>
    /// A mower data object with all data for a mower.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MowerData
    {

        [System.Text.Json.Serialization.JsonPropertyName("system")]
        public MowerSystem System { get; set; } = new MowerSystem();

        [System.Text.Json.Serialization.JsonPropertyName("battery")]
        public Battery Battery { get; set; } = new Battery();

        [System.Text.Json.Serialization.JsonPropertyName("capabilities")]
        public Capabilities Capabilities { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mower")]
        public MowerApp Mower { get; set; } = new MowerApp();

        [System.Text.Json.Serialization.JsonPropertyName("calendar")]
        public Calendar Calendar { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("planner")]
        public Planner Planner { get; set; } = new Planner();

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public Metadata Metadata { get; set; } = new Metadata();

        [System.Text.Json.Serialization.JsonPropertyName("positions")]
        public Positions Positions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("settings")]
        public Settings Settings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statistics")]
        public Statistics Statistics { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stayOutZones")]
        public StayOutZones StayOutZones { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("workAreas")]
        public WorkAreas WorkAreas { get; set; } = default!;

    }

    /// <summary>
    /// System information about a Automower®
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MowerSystem
    {
        /// <summary>
        /// The name given to the Automower® by the user when pairing the Automower®
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// The model name of the Automower®
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("model")]
        public string Model { get; set; } = default!;

        /// <summary>
        /// The serial number for the Automower®
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("serialNumber")]
        public int SerialNumber { get; set; } = default!;

    }

    /// <summary>
    /// Information about the battery in the Automower®
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Battery
    {
        /// <summary>
        /// The current battery level percentage
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("batteryPercent")]
        public int BatteryPercent { get; set; } = default!;

    }

    /// <summary>
    /// Information about what capabilities the Automower® has
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Capabilities
    {
        /// <summary>
        /// If the Automower® supports GPS position. If false no positions are available.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public bool Position { get; set; } = default!;

        /// <summary>
        /// If the Automower® supports headlights
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("headlights")]
        public bool Headlights { get; set; } = default!;

        /// <summary>
        /// If the Automower® supports work areas
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("workAreas")]
        public bool WorkAreas { get; set; } = default!;

        /// <summary>
        /// If the Automower® supports stay-out zones
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stayOutZones")]
        public bool StayOutZones { get; set; } = default!;

    }

    /// <summary>
    /// Information about the mowers current status
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MowerApp
    {
        /// <summary>
        /// Mode:
        /// <br/>  * `MAIN_AREA` - Mower will mow until low battery. Go home and charge. Leave and continue mowing.
        /// <br/>  * `SECONDARY_AREA` - Mower will mow until empty battery, or a limited time. When done, it stops in the garden.
        /// <br/>  * `HOME` - Mower goes home and parks forever.
        /// <br/>  * `DEMO` - Same as main area, but shorter times. (No blade operation)
        /// <br/>  * `UNKNOWN` - Unknown mode.
        /// <br/>  * `POI` - Point of interest.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mode")]
        public string Mode { get; set; } = default!;

        /// <summary>
        /// Activity:
        /// <br/>  * `UNKNOWN` - Unknown.
        /// <br/>  * `NOT_APPLICABLE` - Not applicable.
        /// <br/>  * `MOWING` - Mower is currently mowing.
        /// <br/>  * `GOING_HOME` - Mower is currently going home to the charging station.
        /// <br/>  * `CHARGING` - Mower is currently charging. Note that the mower will only report the activity charging if it was its own decision to go home and charge. I.e., it would like to mow but is charging because it has to. If the mower is restricted it may very well charge when in the charging station, but the activity will be Parked.
        /// <br/>  * `LEAVING` - Mower is currently leaving the charging station and is heading out to a starting point.
        /// <br/>  * `PARKED_IN_CS` - Mower is parked in the charging station.
        /// <br/>  * `STOPPED_IN_GARDEN` - Mower has stopped in garden, for instance in manual mode when the task has been completed.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activity")]
        public string Activity { get; set; } = default!;

        /// <summary>
        /// Inactive reason:
        /// <br/>  * `NONE` - No inactive reason.
        /// <br/>  * `PLANNING` - The mower is planning a path or a work area.
        /// <br/>  * `SEARCHING_FOR_SATELLITES` - Waiting for fix when using EPOS.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inactiveReason")]
        public string InactiveReason { get; set; } = default!;

        /// <summary>
        /// State:
        /// <br/>  * `UNKNOWN` - Unknown.
        /// <br/>  * `NOT_APPLICABLE` - Not applicable.
        /// <br/>  * `PAUSED` - Not applicable.
        /// <br/>  * `IN_OPERATION` - Mower is operating according to selected mode. The activity gives information about what it is currently up to.
        /// <br/>  * `WAIT_UPDATING` - Mower is in wait state when updating.
        /// <br/>  * `WAIT_POWER_UP` - Mower is in wait state when powering up.
        /// <br/>  * `RESTRICTED` - The mower is currently restricted from mowing for some reason. It will continue mowing when the restriction is removed. The activity gives information about what the mower is currently up to.
        /// <br/>  * `OFF` - Mower is turned off
        /// <br/>  * `STOPPED` - Mower is stopped, and cannot be started remotely. Start requirements (safety or other) are not fulfilled.
        /// <br/>  * `ERROR` - A temporary error has occured. If the error is resolved, the mower will resume operation without user interaction. Typically, this happens when the loop signal is lost. When it comes back, the operation is resumed.
        /// <br/>  * `FATAL_ERROR` - A fatal error has occured. Error has to be fixed confirmed to leave this state.
        /// <br/>  * `ERROR_AT_POWER_UP` - An error at power up.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("errorCode")]
        public int ErrorCode { get; set; } = default!;

        /// <summary>
        /// Timestamp for the last error code in milliseconds since 1970-01-01T00:00:00 in local time. NOTE! This timestamp is in local time for the mower and is coming directly from the mower.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("errorCodeTimestamp")]
        public long ErrorCodeTimestamp { get; set; } = default!;

    }

    /// <summary>
    /// Information about the calendar tasks. An Automower® can have several tasks. If the mower supports work areas the property workAreaId is required to connect the task to an work area.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Calendar
    {

        [System.Text.Json.Serialization.JsonPropertyName("tasks")]
        public System.Collections.Generic.ICollection<CalendarTask> Tasks { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalendarTask
    {
        /// <summary>
        /// Start time expressed in minutes after midnight.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("start")]
        public int Start { get; set; } = default!;

        /// <summary>
        /// Duration time expressed in minutes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public int Duration { get; set; } = default!;

        /// <summary>
        /// Enabled on Mondays
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("monday")]
        public bool Monday { get; set; } = default!;

        /// <summary>
        /// Enabled on Tuesdays
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tuesday")]
        public bool Tuesday { get; set; } = default!;

        /// <summary>
        /// Enabled on Wednesdays
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("wednesday")]
        public bool Wednesday { get; set; } = default!;

        /// <summary>
        /// Enabled on Thursdays
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("thursday")]
        public bool Thursday { get; set; } = default!;

        /// <summary>
        /// Enabled on Fridays
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("friday")]
        public bool Friday { get; set; } = default!;

        /// <summary>
        /// Enabled on Saturdays
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("saturday")]
        public bool Saturday { get; set; } = default!;

        /// <summary>
        /// Enabled on Sundays
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sunday")]
        public bool Sunday { get; set; } = default!;

    }

    /// <summary>
    /// Information about the calendar tasks. An Automower® can have several tasks. If the mower supports work areas the property workAreaId is required to connect the task to an work area.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalendarWorkArea
    {

        [System.Text.Json.Serialization.JsonPropertyName("tasks")]
        public System.Collections.Generic.ICollection<CalendarTaskWorkArea> Tasks { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CalendarTaskWorkArea : CalendarTask
    {
        /// <summary>
        /// The work area the calendar task should effect.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("workAreaId")]
        public int WorkAreaId { get; set; } = default!;

    }

    /// <summary>
    /// Information about the planner. The planner tells when the mower should work.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Planner
    {
        /// <summary>
        /// Timestamp for the next auto start in milliseconds since 1970-01-01T00:00:00 in local time.  If the mower is charging then the value is the estimated time when it will be leaving the charging station.  If the value is 0 then the mower should start now.  NOTE! This timestamp is in local time for the mower and is coming directly from the mower.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nextStartTimestamp")]
        public long NextStartTimestamp { get; set; } = default!;

        /// <summary>
        /// The Planner has an override feature, which can be used to override the operation decided by the Calendar. There is room for one override at a time, and it occurs from now and for a duration of time.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("override")]
        public Override Override { get; set; } = default!;

        /// <summary>
        /// Restricted reason:
        /// <br/>  * `NONE` - No restricted reason.
        /// <br/>  * `WEEK_SCHEDULE` - There is no task in the Calendar right now, nothing to do.
        /// <br/>  * `PARK_OVERRIDE` - The restriction is because someone forced us to park, using the override feature.
        /// <br/>  * `SENSOR` - The sensor has decided that the grass is short enough, so there is no need to wear it down even more.
        /// <br/>  * `DAILY_LIMIT` - If a model has a maximum allowed mowing time per day, this restriction will apply when that time has run out.
        /// <br/>  * `FOTA` - When a Fota update is being transferred to the mower, we want to remain in the charging station to ensure that the transfer is successful. The restriction is removed when the transfer is done.
        /// <br/>  * `FROST` - The frost sensor thinks it is too cold to mow.
        /// <br/>  * `ALL_WORK_AREAS_COMPLETED` - All work areas are completed.
        /// <br/>  * `EXTERNAL` - An external reason set by an external tool. Can be IFTTT, Google Assistant or Amazon Alexa. See externalReason for more information
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("restrictedReason")]
        public string RestrictedReason { get; set; } = default!;

        /// <summary>
        /// External reason set by i.e. IFTTT, Google Assistant or Amazon Alexa. Ranges:
        /// <br/>  * `1000 - 1999` - Google Assistant.
        /// <br/>  * `2000 - 2999` - Amazon Alexa.
        /// <br/>  * `3000 - 3999` - Developer Portal.
        /// <br/>  * `4000 - 4999` - IFTTT, Wildlife consideration - 4000, Frost &amp; rain guard - 4001 and Calendar connection - 4002.
        /// <br/>  * `100 000 - 199 999` - IFTTT applets.
        /// <br/>  * `200 000 - 299 999` - Developer Portal.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("externalReason")]
        public int ExternalReason { get; set; } = default!;

    }

    /// <summary>
    /// Information if the mower is connected to the cloud and when last status was reported by the mower to the cloud.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata
    {
        /// <summary>
        /// Is the mower currently connected to the cloud. The mower needs to be connected to send command to the mower.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("connected")]
        public bool Connected { get; set; } = default!;

        /// <summary>
        /// Timestamp for the last status update in milliseconds since 1970-01-01T00:00:00 in UTC time. NOTE! This timestamp is generated in the backend and not from the Mower.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusTimestamp")]
        public long StatusTimestamp { get; set; } = default!;

    }

    /// <summary>
    /// List of all work areas if supported by the Automower®. If empty list, no work areas are created. By default there should be a default work area with id 0.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkAreas : System.Collections.ObjectModel.Collection<WorkArea>
    {

    }

    /// <summary>
    /// A work area is part of your lawn that can be scheduled separately and assigned its own cutting height. The schedule and cutting height set for the work area only applies to this area and only when the mower is operating according to the work area schedule. Work areas are created and managed in the Automower® Connect app. In the app you add, edit or delete a work area. You can also name the area, set shedule and cutting height.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkArea
    {

        [System.Text.Json.Serialization.JsonPropertyName("workAreaId")]
        public int WorkAreaId { get; set; } = default!;

        /// <summary>
        /// Name of the work area
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Cutting height in percent. 0-100
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cuttingHeight")]
        public int CuttingHeight { get; set; } = default!;

    }

    /// <summary>
    /// List of the GPS positions. Latest registered position is first in the array and the oldest last in the array. Max number of positions is 50 after that the latest position is removed from the array.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Positions : System.Collections.ObjectModel.Collection<Position>
    {

    }

    /// <summary>
    /// A coordinate of the mower.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Position
    {

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public double Latitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public double Longitude { get; set; } = default!;

    }

    /// <summary>
    /// Information about the settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Settings : CuttingHeight
    {
        /// <summary>
        /// Information about headlights. Not all Automower® models supports headlight and not all enums are available for all models.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("headlight")]
        public Headlight2 Headlight { get; set; } = default!;

    }

    /// <summary>
    /// Information about the cutting height.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CuttingHeight
    {
        /// <summary>
        /// Prescaled cutting height, Range:1-9
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cuttingHeight")]
        public int CuttingHeight1 { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Headlight
    {
        /// <summary>
        /// Information about headlights. Not all Automower® models supports headlight and not all enums are available for all models.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("headlight")]
        public Headlight2 Headlight1 { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about the statistics. If a value is missing the mower does not support the value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Statistics
    {
        /// <summary>
        /// The number of seconds since the last reset of the cutting blade usage counter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cuttingBladeUsageTime")]
        public double CuttingBladeUsageTime { get; set; } = default!;

        /// <summary>
        /// Number of charging cycles.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("numberOfChargingCycles")]
        public double NumberOfChargingCycles { get; set; } = default!;

        /// <summary>
        /// The total number of collisions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("numberOfCollisions")]
        public double NumberOfCollisions { get; set; } = default!;

        /// <summary>
        /// Total charging time in seconds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalChargingTime")]
        public double TotalChargingTime { get; set; } = default!;

        /// <summary>
        /// Total cutting time in seconds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalCuttingTime")]
        public double TotalCuttingTime { get; set; } = default!;

        /// <summary>
        /// Total driven distance in meters. It's a calculated value based on totalRunningTime multiply with average speed for the mower depending on the model.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalDrivenDistance")]
        public double TotalDrivenDistance { get; set; } = default!;

        /// <summary>
        /// The total running time in seconds. (the wheel motors have been running)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalRunningTime")]
        public double TotalRunningTime { get; set; } = default!;

        /// <summary>
        /// The total searching time in seconds.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalSearchingTime")]
        public double TotalSearchingTime { get; set; } = default!;

    }

    /// <summary>
    /// Information about stay-out zones if supported by the Automower®. Stay-out zones are managed in the Automower® Connect app. To create a stay-out zone you need to use the Automower® Connect app. 
    /// <br/> You can create stay-out zones around areas of your lawn that you do not want the mower to enter: for example, if you have an area with newly sown grass or beautiful spring flowers. The stay-out zone can be activated or deactivated, but not scheduled.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StayOutZones
    {
        /// <summary>
        /// If the stay-out zones are synchronized with the Husqvarna cloud. If the map is dirty you can not enable or disable a stay-out zone.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dirty")]
        public bool Dirty { get; set; } = default!;

        /// <summary>
        /// List of all stay-out zones for the Automower®.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("zones")]
        public System.Collections.Generic.ICollection<StayOutZone> Zones { get; set; } = default!;

    }

    /// <summary>
    /// A stay-out zone is an area that you can use to protect an area on you lawn. The Automower® will not access the are when the zone is enabled.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StayOutZone
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// Name of stay-out zone
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; } = default!;

        /// <summary>
        /// If the sta-yout zone is enabled, the Automower® will not access the zone.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool Enabled { get; set; } = default!;

    }

    /// <summary>
    /// A work area data object with data for a work area.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkAreaData : WorkArea
    {

        [System.Text.Json.Serialization.JsonPropertyName("calendar")]
        public CalendarWorkArea Calendar { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonApiAction
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; } = default!;

    }

    /// <summary>
    /// Start the mower for a period of minutes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Start : JsonApiAction
    {

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public DurationAttributes Attributes { get; set; } = new DurationAttributes();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Start the mower in a work area for a period of minutes. If duration is skipped the mower will continue forever.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartInWorkArea : JsonApiAction
    {

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public WorkAreaAttributes Attributes { get; set; } = new WorkAreaAttributes();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResumeSchedule : JsonApiAction
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pause : JsonApiAction
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parks the mower for a period of minutes. The mower will drive to the charching station and park for the duration set by the commande.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Park : JsonApiAction
    {

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public DurationAttributes Attributes { get; set; } = new DurationAttributes();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParkUntilNextSchedule : JsonApiAction
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParkUntilFurtherNotice : JsonApiAction
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Duration for the command in minutes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DurationAttributes
    {
        /// <summary>
        /// Time in minutes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public long Duration { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkAreaAttributes
    {
        /// <summary>
        /// Optional. Duration period in minutes, if skipped the override will be forever.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("duration")]
        public long Duration { get; set; } = default!;

        /// <summary>
        /// Id on the work area
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("workAreaId")]
        public long WorkAreaId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class JsonApiDataCommandResultTypeValues
    {



        public static string Control = "control";

        
        public static string Timetable = "Timetable";

        
        public static string CuttingHeight = "cuttingHeight";

        
        public static string Headlight = "headlight";

        
        public static string StayOutZone = "stayOutZone";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class MowerAppModeValues
    {

        public static string MAIN_AREA = "MAIN_AREA";

        
        public static string SECONDARY_AREA = "SECONDARY_AREA";

        
        public static string HOME = "HOME";

        
        public static string DEMO = "DEMO";

        
        public static string UNKNOWN = "UNKNOWN";

        
        public static string POI = "POI";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class MowerAppActivityValues
    {

        
        public static string UNKNOWN = "UNKNOWN";

        
        public static string NOT_APPLICABLE = "NOT_APPLICABLE";

        
        public static string MOWING = "MOWING";

        
        public static string GOING_HOME = "GOING_HOME";

        
        public static string CHARGING = "CHARGING";

        
        public static string LEAVING = "LEAVING";

        
        public static string PARKED_IN_CS = "PARKED_IN_CS";

        
        public static string STOPPED_IN_GARDEN = "STOPPED_IN_GARDEN";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class MowerAppInactiveReasonValues
    {

        
        public static string NONE = "NONE";

        
        public static string PLANNING = "PLANNING";

        
        public static string SEARCHING_FOR_SATELLITES = "SEARCHING_FOR_SATELLITES";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class MowerAppStateValues
    {

        
        public static string UNKNOWN = "UNKNOWN";

        
        public static string NOT_APPLICABLE = "NOT_APPLICABLE";

        
        public static string PAUSED = "PAUSED";

        
        public static string IN_OPERATION = "IN_OPERATION";

        
        public static string WAIT_UPDATING = "WAIT_UPDATING";

        
        public static string WAIT_POWER_UP = "WAIT_POWER_UP";

        
        public static string RESTRICTED = "RESTRICTED";

        
        public static string OFF = "OFF";

        
        public static string STOPPED = "STOPPED";

        
        public static string ERROR = "ERROR";

        
        public static string FATAL_ERROR = "FATAL_ERROR";

        
        public static string ERROR_AT_POWER_UP = "ERROR_AT_POWER_UP";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Override
    {
        /// <summary>
        /// Action:
        /// <br/>  * `NOT_ACTIVE` - Not active.
        /// <br/>  * `FORCE_PARK` - Force park until next start means that no more mowing will be done within the current task. Operation will be resumed at the start of the next task instead.
        /// <br/>  * `FORCE_MOW` - Force the mower to mow for the specified amount of time. When the time has elapsed, the override is removed and the Planner reverts to the Calendar instead.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public string Action { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class PlannerRestrictedReasonValues
    {

        
        public static string NONE = "NONE";

        
        public static string WEEK_SCHEDULE = "WEEK_SCHEDULE";

        
        public static string PARK_OVERRIDE = "PARK_OVERRIDE";

        
        public static string SENSOR = "SENSOR";

        
        public static string DAILY_LIMIT = "DAILY_LIMIT";

        
        public static string FOTA = "FOTA";

        
        public static string FROST = "FROST";

        
        public static string ALL_WORK_AREAS_COMPLETED = "ALL_WORK_AREAS_COMPLETED";

        
        public static string EXTERNAL = "EXTERNAL";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Headlight2
    {
        /// <summary>
        /// Mode:
        /// <br/>  * `ALWAYS_ON` - Always on.
        /// <br/>  * `ALWAYS_OFF` - Always off.
        /// <br/>  * `EVENING_ONLY` - Only in the evening.
        /// <br/>  * `EVENING_AND_NIGHT` - In evening and night.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mode")]
        public string Mode { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class OverrideActionValues
    {

        
        public static string NOT_ACTIVE = "NOT_ACTIVE";

        
        public static string FORCE_PARK = "FORCE_PARK";

        
        public static string FORCE_MOW = "FORCE_MOW";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public class Headlight2ModeValues
    {

        
        public static string ALWAYS_ON = "ALWAYS_ON";

        
        public static string ALWAYS_OFF = "ALWAYS_OFF";

        
        public static string EVENING_ONLY = "EVENING_ONLY";

        
        public static string EVENING_AND_NIGHT = "EVENING_AND_NIGHT";

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
